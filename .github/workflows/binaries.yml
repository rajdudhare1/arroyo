name: Build Binaries

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
    branches:
      - '*_build'

env:
  REFINERY_CONFIG: postgres://arroyo:arroyo@localhost:5432/arroyo
  REFINERY_VERSION: 0.8.14
  PROTOC_VERSION: 27.3
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  PNPM_VERSION: "9.7.1"

  # Postgres related
  POSTGRES_USER: arroyo
  POSTGRES_PASSWORD: arroyo
  POSTGRES_DB: arroyo
  POSTGRES_HOST: localhost

  # Cargo build optimizations
  CARGO_PROFILE_RELEASE_LTO: "thin"
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  CARGO_PROFILE_RELEASE_STRIP: true


jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { runner: windows-latest, protoc: win64, pyarch: x86_64, artifact: windows-x86_64, build_target: x86_64-pc-windows-msvc }
    runs-on: ${{ matrix.config.runner }}
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.build_target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.config.artifact }}

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js ${{ env.NODE_VERSION }} with caching
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: webui/pnpm-lock.yaml

      - name: Setup protoc compiler
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-${{ matrix.config.protoc }}.zip" -OutFile protoc.zip
          Expand-Archive -Path protoc.zip -DestinationPath .
          "PROTOC=$($PWD.Path)\bin\protoc.exe" | Out-File -FilePath $env:GITHUB_ENV -Append

      # MSVC toolchain in PATH (cl, link, nmake)
      - name: Enable MSVC build tools
        uses: ilammy/msvc-dev-cmd@v1
        with: { arch: x64 }

      # Install Postgres and vcpkg libs (OpenSSL, SASL, ZSTD)
      - name: Setup PostgreSQL + vcpkg deps
        shell: pwsh
        run: |
          $env:PATH += ";C:\ProgramData\chocolatey\bin"
          choco install postgresql14 --version=14.13 cmake ninja strawberryperl pkgconfiglite -y --no-progress
          "C:\Program Files\PostgreSQL\14\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

          & C:\vcpkg\vcpkg.exe integrate install
          & C:\vcpkg\vcpkg.exe install openssl:x64-windows cyrus-sasl:x64-windows zstd:x64-windows
          & C:\vcpkg\vcpkg.exe list

          Write-Host "=== SASL libs ==="
          dir "C:\vcpkg\installed\x64-windows\lib\*sasl*.lib"
          Write-Host "=== SASL headers ==="
          dir "C:\vcpkg\installed\x64-windows\include\sasl"

      # Export vcpkg into compiler & pkg-config search paths
      - name: Export vcpkg env (MSVC + pkg-config)
        shell: pwsh
        run: |
          # Ensure no mingw artifacts bleed into MSVC build
          Remove-Item Env:AR,Env:CC,Env:CXX -ErrorAction SilentlyContinue

          # pkg-config should point at vcpkg
          'PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows\lib\pkgconfig' | Out-File -FilePath $env:GITHUB_ENV -Append

          # OpenSSL via vcpkg (no vendored, no NASM)
          'OPENSSL_NO_VENDOR=1'                                  | Out-File -FilePath $env:GITHUB_ENV -Append
          'OPENSSL_DIR=C:\vcpkg\installed\x64-windows'           | Out-File -FilePath $env:GITHUB_ENV -Append
          'OPENSSL_LIB_DIR=C:\vcpkg\installed\x64-windows\lib'   | Out-File -FilePath $env:GITHUB_ENV -Append
          'OPENSSL_INCLUDE_DIR=C:\vcpkg\installed\x64-windows\include' | Out-File -FilePath $env:GITHUB_ENV -Append

          # Force sasl2-sys to use pkg-config (avoid vendored nmake)
          'SASL2_SYS_USE_PKG_CONFIG=1'                           | Out-File -FilePath $env:GITHUB_ENV -Append
          'SASL2_DIR=C:\vcpkg\installed\x64-windows'             | Out-File -FilePath $env:GITHUB_ENV -Append
          'SASL2_INCLUDE_DIR=C:\vcpkg\installed\x64-windows\include' | Out-File -FilePath $env:GITHUB_ENV -Append
          'SASL2_LIB_DIR=C:\vcpkg\installed\x64-windows\lib'     | Out-File -FilePath $env:GITHUB_ENV -Append

          # Help cl/link find headers/libs
          'INCLUDE='+$env:INCLUDE+';C:\vcpkg\installed\x64-windows\include' | Out-File -FilePath $env:GITHUB_ENV -Append
          'LIB='+$env:LIB+';C:\vcpkg\installed\x64-windows\lib'             | Out-File -FilePath $env:GITHUB_ENV -Append

          # Sanity check pkg-config
          pkg-config --version
          pkg-config --modversion libsasl2
          pkg-config --cflags --libs libsasl2
          pkg-config --modversion openssl

      - name: Start PostgreSQL and prepare DB
        shell: pwsh
        run: |
          Start-Process -FilePath "C:\Program Files\PostgreSQL\14\bin\pg_ctl.exe" -ArgumentList "start -D 'C:\ProgramData\PostgreSQL\14\data'" -Wait
          Start-Sleep -Seconds 10
          & "psql.exe" -U postgres -c "CREATE USER ${{ env.POSTGRES_USER }} WITH PASSWORD '${{ env.POSTGRES_PASSWORD }}' SUPERUSER;" || echo "user exists"
          & "createdb.exe" -U postgres ${{ env.POSTGRES_DB }} || echo "db exists"

      - name: Run DB migrations
        shell: pwsh
        run: |
          cargo install --debug refinery_cli --version ${{ env.REFINERY_VERSION }}
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations

      - name: Build frontend
        shell: pwsh
        run: cd webui; pnpm install; pnpm build

      - name: Create artifacts directory
        shell: pwsh
        run: mkdir artifacts

      - name: Build Arroyo with Python (MSVC)
        shell: pwsh
        env:
          RUST_BACKTRACE: "1"
          CMAKE_TOOLCHAIN_FILE: C:\vcpkg\scripts\buildsystems\vcpkg.cmake
          VCPKG_ROOT: C:\vcpkg
          VCPKG_DEFAULT_TRIPLET: x64-windows
          VCPKG_TARGET_TRIPLET:  x64-windows
        run: |
          $env:PYO3_PYTHON = "${{ env.pythonLocation }}\python.exe"
          cargo build --features python --release --package arroyo --target ${{ matrix.config.build_target }} -vv
          Move-Item "target\${{ matrix.config.build_target }}\release\arroyo.exe" "artifacts\arroyo-python.exe"

      - name: Build Arroyo without Python (MSVC)
        shell: pwsh
        env:
          RUST_BACKTRACE: "1"
          CMAKE_TOOLCHAIN_FILE: C:\vcpkg\scripts\buildsystems\vcpkg.cmake
          VCPKG_ROOT: C:\vcpkg
          VCPKG_DEFAULT_TRIPLET: x64-windows
          VCPKG_TARGET_TRIPLET:  x64-windows
        run: |
          cargo build -p arroyo --release -vv
          Copy-Item target\release\arroyo.exe artifacts\arroyo.exe

      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-windows-x86_64
          path: artifacts/*
          if-no-files-found: errorlinux:
    strategy:
      fail-fast: true
      matrix:
        # see https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        config:
          - { runner: ubuntu-latest, protoc: linux-x86_64, pyarch: x86_64, artifact: linux-x86_64 }
          - { runner: ubuntu-22.04-32-arm, protoc: linux-aarch_64, pyarch: aarch64, artifact: linux-arm64 }
    runs-on: ${{ matrix.config.runner }}
    services:
      postgres:
        image: postgres:14.13-alpine3.20
        env:
          POSTGRES_USER: arroyo
          POSTGRES_PASSWORD: arroyo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
      - name: Install protoc compiler
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-${{ matrix.config.protoc }}.zip
          unzip protoc*.zip && sudo mv bin/protoc /usr/local/bin
      - name: Update rust
        run: |
          rustup update
      - name: Install Python 3.12
        run: |
          curl -OL https://github.com/indygreg/python-build-standalone/releases/download/20240814/cpython-3.12.5+20240814-${{ matrix.config.pyarch }}-unknown-linux-gnu-install_only.tar.gz
          tar xvfz cpython*.tar.gz
          sudo cp -r python/bin/* /usr/local/bin/
          sudo cp -r python/include/* /usr/local/include/
          sudo cp -r python/lib/* /usr/local/lib/
          sudo cp -r python/share/* /usr/local/share/
          sudo ldconfig

      - name: Run DB migrations
        run: |          
          cargo install --debug refinery_cli --version $REFINERY_VERSION
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations
      - name: Run frontend build
        run: cd webui && pnpm install && pnpm build
      - name: Create output directory
        run: mkdir artifacts
      - name: Build Arroyo with Python
        run: cargo build --features python --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo-python
      - name: Build Arroyo without Python
        run: cargo build --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo
      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-${{ matrix.config.artifact }}
          path: artifacts/*
          if-no-files-found: error
  macos:
    strategy:
      fail-fast: true
      matrix:
        # see https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        config:
          - { runner: macos-14-large, protoc: osx-x86_64, artifact: macos-x86_64 }
          - { runner: macos-14-xlarge, protoc: osx-aarch_64, artifact: macos-m1 }
    runs-on: ${{ matrix.config.runner }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
      - name: Install Python 3.12 via homebrew
        run: brew install python@3.12
      - name: Install protoc compiler
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-${{ matrix.config.protoc }}.zip
          unzip protoc*.zip && sudo mv bin/protoc /usr/local/bin
      - name: Install Postgres and prepare DB
        run: |
          brew install postgresql@14 && brew services start postgresql && sleep 10
          psql postgres -c "CREATE USER arroyo WITH PASSWORD 'arroyo' SUPERUSER;"
          createdb arroyo
      - name: Run DB migrations
        run: |
          cargo install --debug refinery_cli --version $REFINERY_VERSION
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations
      - name: Run frontend build
        run: cd webui && pnpm install && pnpm build
      - name: Create output directory
        run: mkdir artifacts
      - name: Build Arroyo with Python
        run: PYO3_PYTHON=$(brew --prefix python@3.12)/Frameworks/Python.framework/Versions/3.12/bin/python3.12 cargo build --features python --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo-python
      - name: Build Arroyo without Python
        run: cargo build --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo
      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-${{ matrix.config.artifact }}
          path: artifacts/*
          if-no-files-found: error
