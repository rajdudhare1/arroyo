name: Build Binaries

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
    branches:
      - '*_build'

env:
  REFINERY_CONFIG: postgres://arroyo:arroyo@localhost:5432/arroyo
  REFINERY_VERSION: 0.8.14
  PROTOC_VERSION: 27.3

jobs:
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Node + pnpm (same as other jobs)
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
        with: { version: 9.7.1 }

      # Rust
      - uses: dtolnay/rust-toolchain@stable

      # Python for PyO3
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - name: Point PyO3 to this Python
        shell: pwsh
        run: echo "PYO3_PYTHON=$env:pythonLocation\python.exe" >> $env:GITHUB_ENV

      # protoc
      - name: Install protoc compiler
        shell: pwsh
        run: |
          $ver = "${{ env.PROTOC_VERSION }}"
          Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v$ver/protoc-$ver-win64.zip" -OutFile protoc.zip
          Expand-Archive protoc.zip -DestinationPath protoc
          echo "$pwd\protoc\bin" >> $env:GITHUB_PATH

      # ðŸ”§ MSVC env (fixes 'nmake not found' and C compiler errors)
      - name: Enable MSVC build tools
        uses: ilammy/msvc-dev-cmd@v1
        with: { arch: x64 }
      
      - name: Set CC to cl
        shell: pwsh
        run: echo "CC=cl" >> $env:GITHUB_ENV

      # Install PostgreSQL (Windows)
      - name: Install PostgreSQL 14
        shell: pwsh
        run: |
          choco install postgresql14 cmake ninja -y --no-progress
          echo "C:\Program Files\PostgreSQL\14\bin" >> $env:GITHUB_PATH

      # Make localhost auth "trust" so we can bootstrap roles/db without a password
      - name: Configure pg_hba for trust (local)
        shell: pwsh
        run: |
          $dataDir = "C:\Program Files\PostgreSQL\14\data"
          $hba = Join-Path $dataDir "pg_hba.conf"
          # Prepend trust rules for IPv4/IPv6 localhost
          $trust = @(
            "host    all             all             127.0.0.1/32            trust",
            "host    all             all             ::1/128                 trust"
          )
          $orig = Get-Content $hba
          Set-Content -Path $hba -Value ($trust + $orig)
          net stop postgresql-x64-14
          net start postgresql-x64-14
          Start-Sleep -Seconds 10

      # Create arroyo superuser + DB (idempotent) and optionally set postgres password
      - name: Init DB (user/db for Arroyo)
        shell: pwsh
        run: |
          $pgBin = "C:\Program Files\PostgreSQL\14\bin"
          & "$pgBin\pg_isready.exe" -h 127.0.0.1 -p 5432
          $roleExists = & "$pgBin\psql.exe" -U postgres -h 127.0.0.1 -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='arroyo'"
          if (-not $roleExists) {
            & "$pgBin\psql.exe" -U postgres -h 127.0.0.1 -d postgres -c "CREATE ROLE arroyo LOGIN PASSWORD 'arroyo' SUPERUSER;"
          }
          $dbExists = & "$pgBin\psql.exe" -U postgres -h 127.0.0.1 -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='arroyo'"
          if (-not $dbExists) {
            & "$pgBin\createdb.exe" -U postgres -h 127.0.0.1 arroyo
          }
          & "$pgBin\psql.exe" -U postgres -h 127.0.0.1 -d postgres -c "ALTER USER postgres WITH PASSWORD 'arroyo';"

      # Run DB migrations (uses your existing env string)
      - name: Run DB migrations
        shell: pwsh
        env:
          REFINERY_CONFIG: postgres://arroyo:arroyo@localhost:5432/arroyo
        run: |
          cargo install --debug refinery_cli --version $env:REFINERY_VERSION
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations

      - name: Build frontend
        shell: pwsh
        run: |
          cd webui
          pnpm install
          pnpm build

      - name: Create output directory
        shell: pwsh
        run: mkdir artifacts

      - name: Diagnose deps (Windows)
        shell: pwsh
        run: |
          cargo tree --manifest-path crates/arroyo/Cargo.toml -i tikv-jemalloc-sys -e features || $true
          cargo tree --manifest-path crates/arroyo/Cargo.toml -i rdkafka-sys -e features || $true

      - name: Build Arroyo with Python
        shell: pwsh
        run: |
          cargo build --manifest-path crates/arroyo/Cargo.toml --release --no-default-features --features "python"
          Copy-Item target\release\arroyo.exe artifacts\arroyo-python.exe

      - name: Build Arroyo without Python
        shell: pwsh
        run: |
          cargo build --manifest-path crates/arroyo/Cargo.toml --release --no-default-features
          Copy-Item target\release\arroyo.exe artifacts\arroyo.exe

      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-windows-x86_64
          path: artifacts/*
          if-no-files-found: error
  linux:
    strategy:
      fail-fast: true
      matrix:
        # see https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        config:
          - { runner: ubuntu-latest, protoc: linux-x86_64, pyarch: x86_64, artifact: linux-x86_64 }
          - { runner: ubuntu-22.04-32-arm, protoc: linux-aarch_64, pyarch: aarch64, artifact: linux-arm64 }
    runs-on: ${{ matrix.config.runner }}
    services:
      postgres:
        image: postgres:14.13-alpine3.20
        env:
          POSTGRES_USER: arroyo
          POSTGRES_PASSWORD: arroyo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
      - name: Install protoc compiler
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-${{ matrix.config.protoc }}.zip
          unzip protoc*.zip && sudo mv bin/protoc /usr/local/bin
      - name: Update rust
        run: |
          rustup update
      - name: Install Python 3.12
        run: |
          curl -OL https://github.com/indygreg/python-build-standalone/releases/download/20240814/cpython-3.12.5+20240814-${{ matrix.config.pyarch }}-unknown-linux-gnu-install_only.tar.gz
          tar xvfz cpython*.tar.gz
          sudo cp -r python/bin/* /usr/local/bin/
          sudo cp -r python/include/* /usr/local/include/
          sudo cp -r python/lib/* /usr/local/lib/
          sudo cp -r python/share/* /usr/local/share/
          sudo ldconfig

      - name: Run DB migrations
        run: |          
          cargo install --debug refinery_cli --version $REFINERY_VERSION
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations
      - name: Run frontend build
        run: cd webui && pnpm install && pnpm build
      - name: Create output directory
        run: mkdir artifacts
      - name: Build Arroyo with Python
        run: cargo build --features python --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo-python
      - name: Build Arroyo without Python
        run: cargo build --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo
      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-${{ matrix.config.artifact }}
          path: artifacts/*
          if-no-files-found: error

  macos:
    strategy:
      fail-fast: true
      matrix:
        # see https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        config:
          - { runner: macos-14-large, protoc: osx-x86_64, artifact: macos-x86_64 }
          - { runner: macos-14-xlarge, protoc: osx-aarch_64, artifact: macos-m1 }
    runs-on: ${{ matrix.config.runner }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
      - name: Install Python 3.12 via homebrew
        run: brew install python@3.12
      - name: Install protoc compiler
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-${{ matrix.config.protoc }}.zip
          unzip protoc*.zip && sudo mv bin/protoc /usr/local/bin
      - name: Install Postgres and prepare DB
        run: |
          brew install postgresql@14 && brew services start postgresql && sleep 10
          psql postgres -c "CREATE USER arroyo WITH PASSWORD 'arroyo' SUPERUSER;"
          createdb arroyo
      - name: Run DB migrations
        run: |
          cargo install --debug refinery_cli --version $REFINERY_VERSION
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations
      - name: Run frontend build
        run: cd webui && pnpm install && pnpm build
      - name: Create output directory
        run: mkdir artifacts
      - name: Build Arroyo with Python
        run: PYO3_PYTHON=$(brew --prefix python@3.12)/Frameworks/Python.framework/Versions/3.12/bin/python3.12 cargo build --features python --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo-python
      - name: Build Arroyo without Python
        run: cargo build --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo
      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-${{ matrix.config.artifact }}
          path: artifacts/*
          if-no-files-found: error
