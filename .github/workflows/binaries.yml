name: Build Binaries

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
    branches:
      - '*_build'

env:
  REFINERY_CONFIG: postgres://arroyo:arroyo@localhost:5432/arroyo
  REFINERY_VERSION: 0.8.14
  PROTOC_VERSION: 27.3
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  PNPM_VERSION: "9.7.1"

  # Postgres related
  POSTGRES_USER: arroyo
  POSTGRES_PASSWORD: arroyo
  POSTGRES_DB: arroyo
  POSTGRES_HOST: localhost

  # Cargo build optimizations
  CARGO_PROFILE_RELEASE_LTO: "thin"
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  CARGO_PROFILE_RELEASE_STRIP: true


jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { runner: windows-latest, protoc: win64, pyarch: x86_64, artifact: windows-x86_64, build_target: x86_64-pc-windows-msvc }
    runs-on: ${{ matrix.config.runner }}
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.build_target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.config.artifact }}
          cache-on-failure: true
          cache-all-crates: true
          cache-workspace-crates: true
          cache-target: true

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js ${{ env.NODE_VERSION }} with caching
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: webui/pnpm-lock.yaml

      - name: Setup protoc compiler
        run: |
          Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-${{ matrix.config.protoc }}.zip" -OutFile protoc.zip
          Expand-Archive -Path protoc.zip -DestinationPath .
          echo "PROTOC=$($PWD.Path)\bin\protoc.exe" >> $env:GITHUB_ENV

      # Install PostgreSQL + build deps
      - name: Setup PostgreSQL 14
        shell: pwsh
        run: |
          $env:PATH += ";C:\ProgramData\chocolatey\bin"
          choco install postgresql14 --version=14.13 -y --no-progress
          echo "C:\Program Files\PostgreSQL\14\bin" >> $env:GITHUB_PATH
          
          echo "C:\Program Files\PostgreSQL\14\bin" >> $env:GITHUB_PATH
          Start-Process -FilePath "C:\Program Files\PostgreSQL\14\bin\pg_ctl.exe" -ArgumentList "start -D 'C:\ProgramData\PostgreSQL\14\data'" -Wait

      # Install build deps
      - name: Setup build tools
        shell: pwsh
        run: |
          $env:PATH += ";C:\ProgramData\chocolatey\bin"
          choco install cmake pkgconfiglite ninja nasm strawberryperl  -y --no-progress
          & C:\vcpkg\vcpkg.exe integrate install
          & C:\vcpkg\vcpkg.exe install cyrus-sasl:x64-windows zstd:x64-windows openssl:x64-windows
          & C:\vcpkg\vcpkg.exe list
          Write-Host "=== SASL libs ==="
          dir "C:\vcpkg\installed\x64-windows\lib\*sasl*.lib"
          Write-Host "=== SASL headers ==="
          dir "C:\vcpkg\installed\x64-windows\include\sasl"

      # Ensure NASM is discoverable for aws-lc / OpenSSL
      - name: Install NASM (direct zip)
        shell: pwsh
        run: |
            $ver    = "3.00rc5"
            $zipUrl = "https://nasm.us/pub/nasm/releasebuilds/$ver/win64/nasm-$ver-win64.zip"
            $dest   = "$env:RUNNER_TEMP\nasm.zip"
            $outDir = "$env:RUNNER_TEMP\nasm-$ver"

            Invoke-WebRequest -Uri $zipUrl -OutFile $dest
            Expand-Archive -Path $dest -DestinationPath $outDir -Force

            # Find nasm.exe in extracted files
            $nasm = Get-ChildItem -Path $outDir -Filter nasm.exe -Recurse -ErrorAction Stop | Select-Object -First 1
            if (-not $nasm) { throw "nasm.exe not found in $outDir" }

            Write-Host "Using NASM at $($nasm.FullName)"
            & "$($nasm.FullName)" -v

            # Export for build scripts
            "CMAKE_ASM_NASM_COMPILER=$($nasm.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
            "NASM_EXECUTABLE=$($nasm.FullName)"         | Out-File -FilePath $env:GITHUB_ENV -Append
            "PATH=$($nasm.DirectoryName);$env:PATH"     | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Prepare PostgreSQL Database
        run: |
          Start-Sleep -Seconds 10
          & "psql.exe" -U postgres -c "CREATE USER ${{ env.POSTGRES_USER }} WITH PASSWORD '${{ env.POSTGRES_PASSWORD }}' SUPERUSER;" || echo "user exists"
          & "createdb.exe" -U postgres ${{ env.POSTGRES_DB }} || echo "db exists"

      - name: Run DB migrations
        run: |
          cargo install --debug refinery_cli --version ${{ env.REFINERY_VERSION }}
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations

      - name: Run frontend build
        run: cd webui && pnpm install && pnpm build

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Enable MSVC build tools
        uses: ilammy/msvc-dev-cmd@v1
        with: { arch: x64 }

      - name: Diagnose deps (Windows)
        shell: pwsh
        run: |
          cargo tree -i tikv-jemalloc-sys -e features || $true
          cargo tree -i jemalloc_pprof -e features || $true
          cargo tree -i pprof -e features || $true

      # Ensure MSVC sees vcpkg headers/libs
      - name: Export vcpkg include/lib to MSVC search path
        shell: pwsh
        run: |
          $env:INCLUDE = "$env:INCLUDE;C:\vcpkg\installed\x64-windows\include"
          $env:LIB     = "$env:LIB;C:\vcpkg\installed\x64-windows\lib"
          'INCLUDE='+$env:INCLUDE | Out-File -FilePath $env:GITHUB_ENV -Append
          'LIB='+$env:LIB         | Out-File -FilePath $env:GITHUB_ENV -Append

      # Clean any leftover GNU env vars
      - name: Clean GNU vars
        shell: pwsh
        run: |
          Remove-Item Env:CC,Env:CXX,Env:AR,Env:PKG_CONFIG_PATH -ErrorAction SilentlyContinue

      - name: Build Arroyo with Python
        shell: pwsh
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
          RUST_BACKTRACE: "1"
          CMAKE_TOOLCHAIN_FILE: C:\vcpkg\scripts\buildsystems\vcpkg.cmake
          VCPKG_ROOT: C:\vcpkg
          VCPKG_DEFAULT_TRIPLET: x64-windows
          VCPKG_TARGET_TRIPLET:  x64-windows
          OPENSSL_DIR:         C:\vcpkg\installed\x64-windows
          OPENSSL_ROOT_DIR:    C:\vcpkg\installed\x64-windows
          OPENSSL_LIB_DIR:     C:\vcpkg\installed\x64-windows\lib
          OPENSSL_INCLUDE_DIR: C:\vcpkg\installed\x64-windows\include
          SASL2_DIR:           C:\vcpkg\installed\x64-windows
          SASL2_INCLUDE_DIR:   C:\vcpkg\installed\x64-windows\include
          SASL2_LIB_DIR:       C:\vcpkg\installed\x64-windows\lib
          ZSTD_DIR:            C:\vcpkg\installed\x64-windows
          ZSTD_INCLUDE_DIR:    C:\vcpkg\installed\x64-windows\include
          ZSTD_LIB_DIR:        C:\vcpkg\installed\x64-windows\lib
        run: |
          $env:PYO3_PYTHON = "${{ env.pythonLocation }}\python.exe"
          echo $env:CMAKE_POLICY_VERSION_MINIMUM
          cargo build --features python --release --package arroyo --target ${{ matrix.config.build_target }}
          Move-Item "target\${{ matrix.config.build_target }}\release\arroyo.exe" "artifacts\arroyo-python.exe"

      - name: Build Arroyo without Python
        shell: pwsh
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
          RUST_BACKTRACE: "1"
          CMAKE_TOOLCHAIN_FILE: C:\vcpkg\scripts\buildsystems\vcpkg.cmake
          VCPKG_ROOT: C:\vcpkg
          VCPKG_DEFAULT_TRIPLET: x64-windows
          VCPKG_TARGET_TRIPLET:  x64-windows
          OPENSSL_DIR:         C:\vcpkg\installed\x64-windows
          OPENSSL_ROOT_DIR:    C:\vcpkg\installed\x64-windows
          OPENSSL_LIB_DIR:     C:\vcpkg\installed\x64-windows\lib
          OPENSSL_INCLUDE_DIR: C:\vcpkg\installed\x64-windows\include
          SASL2_DIR:           C:\vcpkg\installed\x64-windows
          SASL2_INCLUDE_DIR:   C:\vcpkg\installed\x64-windows\include
          SASL2_LIB_DIR:       C:\vcpkg\installed\x64-windows\lib
          ZSTD_DIR:            C:\vcpkg\installed\x64-windows
          ZSTD_INCLUDE_DIR:    C:\vcpkg\installed\x64-windows\include
          ZSTD_LIB_DIR:        C:\vcpkg\installed\x64-windows\lib
        run: |
          cargo build -p arroyo --release -vv
          Copy-Item target\release\arroyo.exe artifacts\arroyo.exe

      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-windows-x86_64
          path: artifacts/*
          if-no-files-found: error
  linux:
    strategy:
      fail-fast: true
      matrix:
        # see https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        config:
          - { runner: ubuntu-latest, protoc: linux-x86_64, pyarch: x86_64, artifact: linux-x86_64 }
          - { runner: ubuntu-22.04-32-arm, protoc: linux-aarch_64, pyarch: aarch64, artifact: linux-arm64 }
    runs-on: ${{ matrix.config.runner }}
    services:
      postgres:
        image: postgres:14.13-alpine3.20
        env:
          POSTGRES_USER: arroyo
          POSTGRES_PASSWORD: arroyo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
      - name: Install protoc compiler
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-${{ matrix.config.protoc }}.zip
          unzip protoc*.zip && sudo mv bin/protoc /usr/local/bin
      - name: Update rust
        run: |
          rustup update
      - name: Install Python 3.12
        run: |
          curl -OL https://github.com/indygreg/python-build-standalone/releases/download/20240814/cpython-3.12.5+20240814-${{ matrix.config.pyarch }}-unknown-linux-gnu-install_only.tar.gz
          tar xvfz cpython*.tar.gz
          sudo cp -r python/bin/* /usr/local/bin/
          sudo cp -r python/include/* /usr/local/include/
          sudo cp -r python/lib/* /usr/local/lib/
          sudo cp -r python/share/* /usr/local/share/
          sudo ldconfig

      - name: Run DB migrations
        run: |          
          cargo install --debug refinery_cli --version $REFINERY_VERSION
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations
      - name: Run frontend build
        run: cd webui && pnpm install && pnpm build
      - name: Create output directory
        run: mkdir artifacts
      - name: Build Arroyo with Python
        run: cargo build --features python --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo-python
      - name: Build Arroyo without Python
        run: cargo build --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo
      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-${{ matrix.config.artifact }}
          path: artifacts/*
          if-no-files-found: error

  macos:
    strategy:
      fail-fast: true
      matrix:
        # see https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        config:
          - { runner: macos-14-large, protoc: osx-x86_64, artifact: macos-x86_64 }
          - { runner: macos-14-xlarge, protoc: osx-aarch_64, artifact: macos-m1 }
    runs-on: ${{ matrix.config.runner }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.1
      - name: Install Python 3.12 via homebrew
        run: brew install python@3.12
      - name: Install protoc compiler
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-${{ matrix.config.protoc }}.zip
          unzip protoc*.zip && sudo mv bin/protoc /usr/local/bin
      - name: Install Postgres and prepare DB
        run: |
          brew install postgresql@14 && brew services start postgresql && sleep 10
          psql postgres -c "CREATE USER arroyo WITH PASSWORD 'arroyo' SUPERUSER;"
          createdb arroyo
      - name: Run DB migrations
        run: |
          cargo install --debug refinery_cli --version $REFINERY_VERSION
          refinery migrate -e REFINERY_CONFIG -p crates/arroyo-api/migrations
      - name: Run frontend build
        run: cd webui && pnpm install && pnpm build
      - name: Create output directory
        run: mkdir artifacts
      - name: Build Arroyo with Python
        run: PYO3_PYTHON=$(brew --prefix python@3.12)/Frameworks/Python.framework/Versions/3.12/bin/python3.12 cargo build --features python --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo-python
      - name: Build Arroyo without Python
        run: cargo build --release --package arroyo && strip target/release/arroyo && mv target/release/arroyo artifacts/arroyo
      - uses: actions/upload-artifact@v4
        with:
          name: arroyo-${{ matrix.config.artifact }}
          path: artifacts/*
          if-no-files-found: error
